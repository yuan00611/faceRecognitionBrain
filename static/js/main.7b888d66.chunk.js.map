{"version":3,"sources":["components/Logo/Logo.js","components/Rank/Rank.js","components/Navigation/Navigation.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js","components/Logo/brain.png"],"names":["Logo","className","options","max","style","height","width","alt","src","brain","Rank","Navigation","display","justifyContent","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageUrl","box","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","console","log","setState","event","input","target","state","models","predict","then","response","catch","err","params","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.7b888d66.chunk.js","sourcesContent":["import React from 'react';\nimport Tilt from 'react-tilt';\nimport './Logo.css';\nimport brain from './brain.png';\n\nconst Logo = () => {\n\treturn(\n\t\t<div className='ma4 mt0'>\n\t\t\t<Tilt className='Tilt shadow-2' options={{ max: 55}} style={{ height: 130, width: 130 }} >\n\t\t\t\t<div className=\"Tilt-inner\">\n\t\t\t\t\t<img className=\"center pa2 pt3\" alt='logo' src={brain} style={{ height: 100, width: 100 }} />\n\t\t\t\t</div>\n\t\t\t</Tilt>\n\t\t</div>\n\t);\n}\n\nexport default Logo;","import React from 'react';\n\nconst Rank = () => {\n\treturn(\n\t\t<div>\n\t\t\t<div className='white f3'>\n\t\t\t\t{'Debbie, your current rank is...'}\n\t\t\t</div>\n\t\t\t<div className='white f1'>\n\t\t\t\t{'#5'}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Rank;","import React from 'react';\n\nconst Navigation = () => {\n\treturn(\n\t\t<nav style={{ display: 'flex', justifyContent:'flex-end' }}>\n\t\t\t<p className='f3 link dim black underline pa3 pointer'>Sign Out</p>\n\t\t</nav>\n\t);\n}\n\nexport default Navigation;","import React from 'react';\nimport './ImageLinkForm.css';\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\n\treturn(\n\t\t<div>\n\t\t\t<p className='f3'>\n\t\t\t\t{'This Magic Brain will detect faces in your pictures. Get it a try!'}\n\t\t\t</p>\n\t\t\t<div className='center'>\n\t\t\t\t<div className='pa4 br3 shadow-5 center form'>\n\t\t\t\t\t<input className='f4 pa2 w-70 center' type='text' onChange={onInputChange} />\n\t\t\t\t\t<button className='w-30 grow f4 link ph3 pv2 dib white bg-blue' onClick={onButtonSubmit} >Detect</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ImageLinkForm;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ imageUrl, box }) => {\n\treturn(\n\t\t<div className='center ma'>\n\t\t\t<div className='absolute mt2'>\n\t\t\t\t<img id='inputimage' alt='' src= {imageUrl} width='500px' height='auto' />\n\t\t\t\t<div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left:box.leftCol }} ></div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default FaceRecognition;","import React from 'react';\nimport 'tachyons';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nimport './App.css';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport Navigation from './components/Navigation/Navigation';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n\nconst app = new Clarifai.App({\n apiKey: '6afd46ecabdd480e8caa21cbdaf85f86'\n});\n\nconst particlesOptions = {\n  particles: {\n    number:{\n      value: 60,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col *  width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models\n      .predict(\n        \"a403429f2ddf4b49b307e318f00e528b\", \n        this.state.input\n      )\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Particles className='particles' params={particlesOptions} />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\n      </div>\n    )\n  };\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain.a415a39c.png\";"],"sourceRoot":""}